# File produced by Kranc

STORAGE: metric_exact[other_timelevels]

STORAGE: curv_exact[other_timelevels]

STORAGE: lapse_exact[other_timelevels]

STORAGE: dtlapse_exact[other_timelevels]

STORAGE: shift_exact[other_timelevels]

STORAGE: dtshift_exact[other_timelevels]
schedule GaugeWave_Startup at STARTUP
{
  LANG: C
  OPTIONS: meta
} "create banner"

schedule GaugeWave_RegisterSymmetries in SymmetryRegister
{
  LANG: C
  OPTIONS: meta
} "register symmetries"

if (CCTK_EQUALS(initial_data, "GaugeWave"))
{
  schedule GaugeWave_initial in ADMBase_InitialData
  {
    LANG: C
    READS: grid::x(Everywhere)
    READS: grid::y(Everywhere)
    READS: grid::z(Everywhere)
    WRITES: admbase::alp(Everywhere)
    WRITES: admbase::betax(Everywhere)
    WRITES: admbase::betay(Everywhere)
    WRITES: admbase::betaz(Everywhere)
    WRITES: admbase::dtalp(Everywhere)
    WRITES: admbase::dtbetax(Everywhere)
    WRITES: admbase::dtbetay(Everywhere)
    WRITES: admbase::dtbetaz(Everywhere)
    WRITES: admbase::gxx(Everywhere)
    WRITES: admbase::gxy(Everywhere)
    WRITES: admbase::gxz(Everywhere)
    WRITES: admbase::gyy(Everywhere)
    WRITES: admbase::gyz(Everywhere)
    WRITES: admbase::gzz(Everywhere)
    WRITES: admbase::kxx(Everywhere)
    WRITES: admbase::kxy(Everywhere)
    WRITES: admbase::kxz(Everywhere)
    WRITES: admbase::kyy(Everywhere)
    WRITES: admbase::kyz(Everywhere)
    WRITES: admbase::kzz(Everywhere)
  } "GaugeWave_initial"
}

if (CCTK_EQUALS(evolution_method, "GaugeWave"))
{
  schedule GaugeWave_always at CCTK_PRESTEP
  {
    LANG: C
    READS: grid::x(Everywhere)
    READS: grid::y(Everywhere)
    READS: grid::z(Everywhere)
    WRITES: admbase::alp(Everywhere)
    WRITES: admbase::betax(Everywhere)
    WRITES: admbase::betay(Everywhere)
    WRITES: admbase::betaz(Everywhere)
    WRITES: admbase::dtalp(Everywhere)
    WRITES: admbase::dtbetax(Everywhere)
    WRITES: admbase::dtbetay(Everywhere)
    WRITES: admbase::dtbetaz(Everywhere)
    WRITES: admbase::gxx(Everywhere)
    WRITES: admbase::gxy(Everywhere)
    WRITES: admbase::gxz(Everywhere)
    WRITES: admbase::gyy(Everywhere)
    WRITES: admbase::gyz(Everywhere)
    WRITES: admbase::gzz(Everywhere)
    WRITES: admbase::kxx(Everywhere)
    WRITES: admbase::kxy(Everywhere)
    WRITES: admbase::kxz(Everywhere)
    WRITES: admbase::kyy(Everywhere)
    WRITES: admbase::kyz(Everywhere)
    WRITES: admbase::kzz(Everywhere)
  } "GaugeWave_always"
}

if (CCTK_EQUALS(exact_method, "GaugeWave"))
{
  schedule GaugeWave_exact at CCTK_ANALYSIS
  {
    LANG: C
    READS: admbase::gxx(Everywhere)
    READS: admbase::gxy(Everywhere)
    READS: admbase::gxz(Everywhere)
    READS: admbase::gyy(Everywhere)
    READS: admbase::gyz(Everywhere)
    READS: admbase::gzz(Everywhere)
    READS: grid::x(Everywhere)
    READS: grid::y(Everywhere)
    READS: grid::z(Everywhere)
    WRITES: GaugeWave::alpExact(Everywhere)
    WRITES: GaugeWave::betaExact1(Everywhere)
    WRITES: GaugeWave::betaExact2(Everywhere)
    WRITES: GaugeWave::betaExact3(Everywhere)
    WRITES: GaugeWave::dtalpExact(Everywhere)
    WRITES: GaugeWave::dtbetaExact1(Everywhere)
    WRITES: GaugeWave::dtbetaExact2(Everywhere)
    WRITES: GaugeWave::dtbetaExact3(Everywhere)
    WRITES: GaugeWave::gExact11(Everywhere)
    WRITES: GaugeWave::gExact12(Everywhere)
    WRITES: GaugeWave::gExact13(Everywhere)
    WRITES: GaugeWave::gExact22(Everywhere)
    WRITES: GaugeWave::gExact23(Everywhere)
    WRITES: GaugeWave::gExact33(Everywhere)
    WRITES: GaugeWave::kExact11(Everywhere)
    WRITES: GaugeWave::kExact12(Everywhere)
    WRITES: GaugeWave::kExact13(Everywhere)
    WRITES: GaugeWave::kExact22(Everywhere)
    WRITES: GaugeWave::kExact23(Everywhere)
    WRITES: GaugeWave::kExact33(Everywhere)
  } "GaugeWave_exact"
}

schedule GaugeWave_SelectBoundConds in MoL_PostStep
{
  LANG: C
  OPTIONS: level
} "select boundary conditions"

schedule GaugeWave_CheckBoundaries at BASEGRID
{
  LANG: C
  OPTIONS: meta
} "check boundaries treatment"

schedule GaugeWave_RegisterVars in MoL_Register
{
  LANG: C
  OPTIONS: meta
} "Register Variables for MoL"

schedule GaugeWave_ParamCheck at PARAMCHECK
{
  LANG: C
  OPTIONS: global
} "Check parameter consistency"
schedule group ApplyBCs as GaugeWave_ApplyBCs in MoL_PostStep after GaugeWave_SelectBoundConds
{
} "Apply boundary conditions controlled by thorn Boundary"
