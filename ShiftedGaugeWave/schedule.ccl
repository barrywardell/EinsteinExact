# File produced by Kranc


schedule ShiftedGaugeWave_Startup at STARTUP
{
  LANG: C
  OPTIONS: meta
} "create banner"

schedule ShiftedGaugeWave_RegisterSymmetries in SymmetryRegister
{
  LANG: C
  OPTIONS: meta
} "register symmetries"


if (CCTK_EQUALS(initial_data, "ShiftedGaugeWave"))
{
  schedule ShiftedGaugeWave_initial in ADMBase_InitialData
  {
    LANG: C
    READS: grid::x(Everywhere)
    READS: grid::y(Everywhere)
    READS: grid::z(Everywhere)
    WRITES: admbase::alp(Everywhere)
    WRITES: admbase::betax(Everywhere)
    WRITES: admbase::betay(Everywhere)
    WRITES: admbase::betaz(Everywhere)
    WRITES: admbase::dtalp(Everywhere)
    WRITES: admbase::dtbetax(Everywhere)
    WRITES: admbase::dtbetay(Everywhere)
    WRITES: admbase::dtbetaz(Everywhere)
    WRITES: admbase::gxx(Everywhere)
    WRITES: admbase::gxy(Everywhere)
    WRITES: admbase::gxz(Everywhere)
    WRITES: admbase::gyy(Everywhere)
    WRITES: admbase::gyz(Everywhere)
    WRITES: admbase::gzz(Everywhere)
    WRITES: admbase::kxx(Everywhere)
    WRITES: admbase::kxy(Everywhere)
    WRITES: admbase::kxz(Everywhere)
    WRITES: admbase::kyy(Everywhere)
    WRITES: admbase::kyz(Everywhere)
    WRITES: admbase::kzz(Everywhere)
  } "ShiftedGaugeWave_initial"
}


if (CCTK_EQUALS(evolution_method, "ShiftedGaugeWave"))
{
  schedule ShiftedGaugeWave_always at CCTK_PRESTEP
  {
    LANG: C
    READS: grid::x(Everywhere)
    READS: grid::y(Everywhere)
    READS: grid::z(Everywhere)
    WRITES: admbase::alp(Everywhere)
    WRITES: admbase::betax(Everywhere)
    WRITES: admbase::betay(Everywhere)
    WRITES: admbase::betaz(Everywhere)
    WRITES: admbase::dtalp(Everywhere)
    WRITES: admbase::dtbetax(Everywhere)
    WRITES: admbase::dtbetay(Everywhere)
    WRITES: admbase::dtbetaz(Everywhere)
    WRITES: admbase::gxx(Everywhere)
    WRITES: admbase::gxy(Everywhere)
    WRITES: admbase::gxz(Everywhere)
    WRITES: admbase::gyy(Everywhere)
    WRITES: admbase::gyz(Everywhere)
    WRITES: admbase::gzz(Everywhere)
    WRITES: admbase::kxx(Everywhere)
    WRITES: admbase::kxy(Everywhere)
    WRITES: admbase::kxz(Everywhere)
    WRITES: admbase::kyy(Everywhere)
    WRITES: admbase::kyz(Everywhere)
    WRITES: admbase::kzz(Everywhere)
  } "ShiftedGaugeWave_always"
}

schedule ShiftedGaugeWave_SelectBoundConds in MoL_PostStep
{
  LANG: C
  OPTIONS: level
} "select boundary conditions"

schedule ShiftedGaugeWave_CheckBoundaries at BASEGRID
{
  LANG: C
  OPTIONS: meta
} "check boundaries treatment"

schedule ShiftedGaugeWave_RegisterVars in MoL_Register
{
  LANG: C
  OPTIONS: meta
} "Register Variables for MoL"

schedule ShiftedGaugeWave_ParamCheck at PARAMCHECK
{
  LANG: C
  OPTIONS: global
} "Check parameter consistency"

schedule group ApplyBCs as ShiftedGaugeWave_ApplyBCs in MoL_PostStep after ShiftedGaugeWave_SelectBoundConds
{
} "Apply boundary conditions controlled by thorn Boundary"
